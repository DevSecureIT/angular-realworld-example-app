name: Continuous Deployment

on:
  # Déclenché manuellement ou après un merge sur main
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  # Job de construction de l'image
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t angular-app:${{ github.sha }} .
      
      - name: Tag images for environments
        run: |
          docker tag angular-app:${{ github.sha }} angular-app:staging
          docker tag angular-app:${{ github.sha }} angular-app:production

  # Déploiement en staging
  deploy-staging:
    needs: build
    runs-on: self-hosted
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          docker-compose up -d app-staging
          echo "Deployment to staging completed."
      
      - name: Verify staging deployment
        shell: pwsh
        run: |
          echo "Verifying staging deployment..."
          Start-Sleep -Seconds 5
          
          $response = Invoke-WebRequest -Uri http://localhost:8080 -UseBasicParsing
          if ($response.Content -match "conduit") {
            Write-Host "✅ Application is running correctly in staging" -ForegroundColor Green
          } else {
            Write-Host "❌ Staging verification failed" -ForegroundColor Red
            exit 1
          }

  # Déploiement en production
  deploy-production:
    needs: deploy-staging
    runs-on: self-hosted
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          docker-compose up -d app-production
          echo "Deployment to production completed."
      
      - name: Verify production deployment
        shell: powershell
        run: |
          echo "Verifying production deployment..."
          Start-Sleep -Seconds 5
          
          $response = Invoke-WebRequest -Uri http://localhost:80 -UseBasicParsing
          if ($response.Content -match "conduit") {
            Write-Host "✅ Application is running correctly in production" -ForegroundColor Green
          } else {
            Write-Host "❌ Production verification failed" -ForegroundColor Red
            exit 1
          }